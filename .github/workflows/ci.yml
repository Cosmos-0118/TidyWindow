name: CI

on:
    workflow_dispatch:
        inputs:
            reason:
                description: "Optional note when manually triggering CI"
                required: false
                type: string

jobs:
    build:
        runs-on: windows-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Restore
              run: dotnet restore src/TidyWindow.sln

            - name: Build
              run: dotnet build src/TidyWindow.sln --configuration Release --no-restore

            - name: Test
              run: dotnet test src/TidyWindow.sln --configuration Release --no-build

            - name: Publish packaging snapshot
              run: dotnet publish src/TidyWindow.App/TidyWindow.App.csproj --configuration Release --runtime win-x64 --self-contained false --no-restore

            - name: Verify packaged automation assets
              shell: pwsh
              run: |
                  $publishDir = "src/TidyWindow.App/bin/Release/net8.0-windows/win-x64/publish"
                  if (-not (Test-Path $publishDir)) {
                    throw "Publish directory not found: $publishDir"
                  }

                  $repoRoot = (Get-Location).Path
                  $assetRoots = @(
                    @{ Source = Join-Path $repoRoot "automation"; Target = Join-Path $publishDir "automation"; Label = "automation" },
                    @{ Source = Join-Path $repoRoot "data"; Target = Join-Path $publishDir "data"; Label = "data" }
                  )

                  $missing = [System.Collections.Generic.List[string]]::new()

                  foreach ($spec in $assetRoots) {
                    if (-not (Test-Path $spec.Source)) {
                      throw "Source asset root missing: $($spec.Label)"
                    }

                    Get-ChildItem -Path $spec.Source -File -Recurse | ForEach-Object {
                      $relative = [System.IO.Path]::GetRelativePath($spec.Source, $_.FullName)
                      $targetPath = Join-Path $spec.Target $relative
                      if (-not (Test-Path $targetPath)) {
                        $normalized = ($relative -replace '\\', '/')
                        $missing.Add("$($spec.Label)/$normalized") | Out-Null
                      }
                    }
                  }

                  if ($missing.Count -gt 0) {
                    $details = $missing | ForEach-Object { " - $_" }
                    throw "Missing packaged assets:`n$($details -join [Environment]::NewLine)"
                  }

